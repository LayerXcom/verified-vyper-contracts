; Modified from: https://github.com/runtimeverification/verified-smart-contracts/blob/37c4be50bb0953e4dcde4d4d4f7f876181a5adee/erc20/vyper/vyper-erc20-spec.ini

[root]
k: #execute => #halt
schedule: CONSTANTINOPLE
gas: {GASCAP} => _

[totalSupply]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_TOTALSUPPLY}, .IntList) |-> TOTAL
    _:Map
origStorage: _
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
origStorage: _
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
origStorage: _
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(CALLER_ID)), #indexed(#address(SPENDER)), #uint256(VALUE))) )
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (INIT_VALUE => VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> INIT_VALUE
    _:Map
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int INIT_VALUE     andBool INIT_VALUE     <Int (2 ^Int 256)

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)

[transfer-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(CALLER_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transfer-success-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)

[transfer-success-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM

[transfer-failure]
statusCode: _ => EVMC_REVERT
output: _ => _
log: _

[transfer-failure-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_TO +Int VALUE >=Int (2 ^Int 256) )

[transfer-failure-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
origStorage: _
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE >Int BAL_FROM

[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)

[transferFrom-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transferFrom-success-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool VALUE <=Int ALLOW

[transferFrom-success-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW

[transferFrom-failure]
statusCode: _ => EVMC_REVERT
output: _ => _
log: _

[transferFrom-failure-1]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => _)  
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => _)  
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
origStorage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_TO +Int VALUE >=Int (2 ^Int 256)
     orBool   VALUE >Int ALLOW )

[transferFrom-failure-2]
storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
origStorage: 
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE >Int ALLOW )

[pgm]
compiler: "Vyper"
_name: 0
_symbol: 1
_decimals: 2
_balances: 3
_allowances: 4
_totalSupply: 5
code: "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263d0e30db06000511415610160573461014052336101605260036101605160e05260c052604060c020546101405160036101605160e05260c052604060c020540110156100df57600080fd5b6101405160036101605160e05260c052604060c020540160036101605160e05260c052604060c020556005546101405160055401101561011e57600080fd5b610140516005540160055561014051610180526101605160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610180a3005b632e1a7d4d600051141561024a576020600461014037341561018157600080fd5b33610160526101405160036101605160e05260c052604060c0205410156101a757600080fd5b6101405160036101605160e05260c052604060c020540360036101605160e05260c052604060c020556101405160055410156101e257600080fd5b6101405160055403600555600060006000600061014051610160516000f161020957600080fd5b61014051610180526000610160517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610180a3600160005260206000f3005b6318160ddd600051141561027057341561026357600080fd5b60055460005260206000f3005b6370a0823160005114156102bf576020600461014037341561029157600080fd5b60043560205181106102a257600080fd5b5060036101405160e05260c052604060c0205460005260206000f3005b63a9059cbb60005114156103e157604060046101403734156102e057600080fd5b60043560205181106102f157600080fd5b5033610180526101605160036101805160e05260c052604060c02054101561031857600080fd5b6101605160036101805160e05260c052604060c020540360036101805160e05260c052604060c0205560036101405160e05260c052604060c020546101605160036101405160e05260c052604060c0205401101561037557600080fd5b6101605160036101405160e05260c052604060c020540160036101405160e05260c052604060c02055610160516101a05261014051610180517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a3600160005260206000f3005b6323b872dd6000511415610577576060600461014037341561040257600080fd5b600435602051811061041357600080fd5b50602435602051811061042557600080fd5b50336101a05260046101405160e05260c052604060c0206101a05160e05260c052604060c020546101c0526101805160036101405160e05260c052604060c02054101561047157600080fd5b6101805160036101405160e05260c052604060c020540360036101405160e05260c052604060c0205560036101605160e05260c052604060c020546101805160036101605160e05260c052604060c020540110156104ce57600080fd5b6101805160036101605160e05260c052604060c020540160036101605160e05260c052604060c02055610180516101c051101561050a57600080fd5b610180516101c0510360046101405160e05260c052604060c0206101a05160e05260c052604060c02055610180516101e05261016051610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101e0a3600160005260206000f3005b63095ea7b36000511415610617576040600461014037341561059857600080fd5b60043560205181106105a957600080fd5b5033610180526101605160046101805160e05260c052604060c0206101405160e05260c052604060c02055610160516101a05261014051610180517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560206101a0a3600160005260206000f3005b63dd62ed3e6000511415610687576040600461014037341561063857600080fd5b600435602051811061064957600080fd5b50602435602051811061065b57600080fd5b5060046101405160e05260c052604060c0206101605160e05260c052604060c0205460005260206000f3005b6306fdde0360005114156106ad5734156106a057600080fd5b60005460005260206000f3005b6395d89b4160005114156106d35734156106c657600080fd5b60015460005260206000f3005b63313ce56760005114156106f95734156106ec57600080fd5b60025460005260206000f3005b60006000fd"
gasCap: 100000
